USE sakila;

-- List the number of films per category.
SELECT film_category.category_id AS 'categories', COUNT(film.film_id) AS 'films in category'
FROM film_category
JOIN film
ON film_category.film_id = film.film_id
GROUP BY film_category.category_id;

-- Retrieve the store ID, city, and country for each store.
SELECT store.store_id AS 'store', city.city_id AS 'city', city.country_id AS 'country'
FROM store
JOIN address
ON store.address_id = address.address_id
JOIN city
ON city.city_id = address.city_id
JOIN country ON city.country_id = country.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT store.store_id AS 'Store', SUM(payment.amount) AS 'Revenue'
FROM store
JOIN staff
ON store.store_id = staff.store_id
JOIN payment
ON payment.staff_id = staff.staff_id
GROUP BY store.store_id;

-- Determine the average running time of films for each category.
SELECT film_category.category_id AS 'Film Categories', AVG(film.length) AS 'Average Run Time'
FROM film_category
JOIN film
ON film.film_id = film_category.film_id
GROUP BY film_category.category_id;


-- Identify the film categories with the longest average running time.
SELECT DISTINCT(film_category.category_id) AS 'Film Categories', AVG(film.length) AS 'Average Run Time'
FROM film_category
JOIN film
ON film.film_id = film_category.film_id
GROUP BY film_category.category_id
ORDER BY AVG(film.length) DESC;  -- CATEGORY 15 HAS THE LONGEST RUN TIME

-- Display the top 10 most frequently rented movies in descending order.
SELECT film.title AS 'Film', SUM(rental.rental_id) AS 'Frequency'
FROM film
JOIN inventory
ON inventory.film_id = film.film_id
JOIN rental
ON rental.rental_id = inventory.inventory_id
GROUP BY film.film_id
ORDER BY SUM(rental.rental_id) DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT film.title AS 'Film', inventory.store_id AS 'Store'
FROM film
JOIN inventory
ON inventory.film_id = film.film_id
WHERE film.title = 'Academy Dinosaur' AND inventory.store_id = 1;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."
SELECT distinct(film.title) AS 'Film', rental.return_date,
	CASE
		WHEN rental.return_date IS NULL THEN 'Available'
        ELSE 'Unavailable'
	END AS 'Availability'
FROM film
JOIN inventory
ON inventory.film_id = film.film_id
LEFT JOIN rental
ON rental.inventory_id = inventory.inventory_id
ORDER BY film.title ASC;